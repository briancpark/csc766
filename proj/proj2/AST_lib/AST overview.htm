<html xmlns="http://www.w3.org/TR/REC-html40"
      xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
    <meta content="text/html; charset=windows-1252" http-equiv=Content-Type>
    <meta content=Word.Document name=ProgId>
    <meta content="Microsoft Word 10" name=Generator>
    <meta content="Microsoft Word 10" name=Originator>
    <link href="AST%20overview_files/filelist.xml" rel=File-List>
    <title>AST overview</title>
    <!--[if gte mso 9]>
    <xml>
        <o:DocumentProperties>
            <o:Author>Abhinav Jalan</o:Author>
            <o:LastAuthor>Abhinav Jalan</o:LastAuthor>
            <o:Revision>2</o:Revision>
            <o:TotalTime>71</o:TotalTime>
            <o:Created>2004-09-09T13:32:00Z</o:Created>
            <o:LastSaved>2004-09-09T13:32:00Z</o:LastSaved>
            <o:Pages>1</o:Pages>
            <o:Words>596</o:Words>
            <o:Characters>3402</o:Characters>
            <o:Company>Abhinav Jalan</o:Company>
            <o:Lines>28</o:Lines>
            <o:Paragraphs>7</o:Paragraphs>
            <o:CharactersWithSpaces>3991</o:CharactersWithSpaces>
            <o:Version>10.3501</o:Version>
        </o:DocumentProperties>
    </xml><![endif]--><!--[if gte mso 9]>
    <xml>
        <w:WordDocument>
            <w:DoNotShowRevisions/>
            <w:DoNotPrintRevisions/>
            <w:DoNotShowMarkup/>
            <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
        </w:WordDocument>
    </xml><![endif]-->
    <style>
        <!--
        /* Style Definitions */
        p.MsoNormal, li.MsoNormal, div.MsoNormal {
            mso-style-parent: "";
            margin: 0in;
            margin-bottom: .0001pt;
            mso-pagination: widow-orphan;
            font-size: 12.0pt;
            font-family: "Times New Roman";
            mso-fareast-font-family: "Times New Roman";
        }

        p {
            mso-margin-top-alt: auto;
            margin-right: 0in;
            mso-margin-bottom-alt: auto;
            margin-left: 0in;
            mso-pagination: widow-orphan;
            font-size: 12.0pt;
            font-family: "Times New Roman";
            mso-fareast-font-family: "Times New Roman";
        }

        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in 1.25in 1.0in 1.25in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        div.Section1 {
            page: Section1;
        }

        /* List Definitions */
        @list l0 {
            mso-list-id: 1138836534;
            mso-list-type: hybrid;
            mso-list-template-ids: 828413028 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;
        }
        @list l0:level1 {
            mso-level-number-format: bullet;
            mso-level-text: \F0B7;
            mso-level-tab-stop: .5in;
            mso-level-number-position: left;
            text-indent: -.25in;
            font-family: Symbol;
        }
        @list l0:level2 {
            mso-level-tab-stop: 1.0in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        @list l0:level3 {
            mso-level-tab-stop: 1.5in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        @list l0:level4 {
            mso-level-tab-stop: 2.0in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        @list l0:level5 {
            mso-level-tab-stop: 2.5in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        @list l0:level6 {
            mso-level-tab-stop: 3.0in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        @list l0:level7 {
            mso-level-tab-stop: 3.5in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        @list l0:level8 {
            mso-level-tab-stop: 4.0in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        @list l0:level9 {
            mso-level-tab-stop: 4.5in;
            mso-level-number-position: left;
            text-indent: -.25in;
        }
        ol {
            margin-bottom: 0in;
        }

        ul {
            margin-bottom: 0in;
        }

        -->
    </style>
    <!--[if gte mso 10]>
    <style>
        /* Style Definitions */
        table.MsoNormalTable {
            mso-style-name: "Table Normal";
            mso-tstyle-rowband-size: 0;
            mso-tstyle-colband-size: 0;
            mso-style-noshow: yes;
            mso-style-parent: "";
            mso-padding-alt: 0in 5.4pt 0in 5.4pt;
            mso-para-margin: 0in;
            mso-para-margin-bottom: .0001pt;
            mso-pagination: widow-orphan;
            font-size: 10.0pt;
            font-family: "Times New Roman";
        }
    </style>
    <![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

    <p style='margin:0in;margin-bottom:.0001pt'><b>An overview of AST related code
        in the Adap compiler</b></p>

    <p style='margin:0in;margin-bottom:.0001pt'>The AST interface is defined and
        mostly implemented by classes in <i>ast.parser </i>package. See javadoc for
        their data and function members. As a research tool, it has little written
        documentation.&nbsp;See the TA for questions. AST tree comprises of nodes. The
        nodes would correspond to function definitions and declaration, Variable
        declaration, assignments, jumps, labels, variables operands etc. For most of
        the project you would be just moving nodes from one place to another, creating
        new nodes, copying nodes and deleting them. All these basic operations can be
        done by function provided in the base class of all nodes <i style='mso-bidi-font-style:
normal'>AstNode</i>. Following is a brief description of each of them:</p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>AstNode
class:</span></b> the base class of AST. It supports common functions as
        follows:&nbsp;</p>

    <p style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt;text-indent:-.25in;mso-list:l0 level1 lfo2;tab-stops:
list .5in'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
            style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Tree traversal includes <i style='mso-bidi-font-style:
normal'>GetChildren(), GetNumChildren()</i> and <i style='mso-bidi-font-style:
normal'>GetParentAst()</i></p>

    <p style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt;text-indent:-.25in;mso-list:l0 level1 lfo2;tab-stops:
list .5in'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
            style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Tree modification includes insertions such as <i
            style='mso-bidi-font-style:normal'>InsertMeBefore(AstNode),
        InsertMeAfter(AstNode), InsertMeAsChildOf(AstNode)</i></p>

    <p style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt;text-indent:-.25in;mso-list:l0 level1 lfo2;tab-stops:
list .5in'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
            style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Move operations as well as the deletion
        operation, <i style='mso-bidi-font-style:normal'>DetachMe(),
            MoveMeAfter(AstNode), MoveMeAsChildOf(AstNode), MoveMeAsChildOf(AstNode, int)</i></p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>FuncAst
class:</span></b> the root AST node for a C function definition.&nbsp;It has a
        function body (a CodeBlock object) and a function type (a FuncType object). </p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>BaseType
class: </span></b>A base type represents basic storage types, which include
        primitive types (e.g. int and float, implemented by PrimitiveType class), array
        type (e.g. A[100], ArrayType class), and function declarations (FuncType
        class). In this project, you need to handle just single-dimension arrays. </p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>DataType
class:</span></b><span style='color:#000099'> </span>The type of data, which is
        a base type (zero indirection) or a pointer to a base type.&nbsp; You do not
        need to deal with pointer type in this project, so the indirection is always
        zero. </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'><o:p>&nbsp;</o:p></span></b></p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>VarAst
class:</span></b> declaration of variables, which includes a name and a data
        type (a DataType object). </p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>SegAst
class:</span></b> a segment of C code.&nbsp; A segment is a lexical
        scope.&nbsp; It has a type table and symbol table for types and variables
        defined inside the scope.&nbsp; Three subclasses are ProgAst (the root node for
        a program), FileAst (the root node for a C file), and CodeBlock (the root node
        for a C block).&nbsp; All programs in this project will be in a single file.&nbsp;
        So a ProgAst node would contain only one element, which is a FileAst
        node.&nbsp; The parser and code generation interface is supported by
        ProgAst.&nbsp; To parse a program into an AST tree, construct a ProgAst by
        giving it the file name of the input program, for example, ProgAst inputProgram
        = new ProgAst(&quot;/u/someone/test/foo.adap&quot;).&nbsp; For a valid AST, you
        can call ProgAst.GenCode() to generate the program in C.&nbsp; For example,
        invoking inputProgram.GenCode() would generate a C file named &quot;foo.out.c&quot;.&nbsp;
        The code generation checks some but not all syntax and type consistency.&nbsp;
        You need to use gcc to compile the generated program to check for errors. </p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>OperatorAst
class:</span></b> the root class for all expressions.&nbsp; Operators include
        data-access operators in DataAccAst and computation operators in ExprAst.&nbsp;
        The only data access operator we consider is array access operator in ArrayAcc
        class, a subclass of DataAccAst.&nbsp; Arithmetic and comparison expressions
        are represented by ExprAst with the C-style operator (e.g. +, -, *, /, %, &gt;&gt;).
        Function calls are also ExprAst with the function name as the operator (e.g.
        printf).&nbsp;&nbsp; If an ExprAst node is a statement, e.g.
        &quot;foo(a+b);&quot;, it also belongs to the subclass, ExprStmt. </p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>StatAst
class:</span></b> four other types of statements (in addition to ExprStmt) are
        assignment (AssignStat), goto and if-goto (GotoStat), label (LabelStat), and
        return statement (ReturnStat).&nbsp; To test whether an AstNode n is a
        statement, for example, you can use &quot;(n instanceof StatAst || n instanceof
        ExprStmt)&quot;. </p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>VarAccAst
class:</span></b> access to a variable, for example, an access to a variable
        &quot;v&quot;. </p>

    <p style='margin:0in;margin-bottom:.0001pt'>
        <o:p>&nbsp;</o:p>
    </p>

    <p style='margin:0in;margin-bottom:.0001pt'><b><span style='color:#000099'>ConstAst
class:</span></b> an integer, real, or string constant. This project does not
        need real constants, but it may have string constants for printfs. </p>

</div>

</body>

</html>
