*** CFG for function: initialize_array***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 2 
bound = 32;
idx = 0;
goto L3;

// Block 1:
//   Predecessor: Block 2 
//   Successor: Block 2 
L2:;
temp_0 = (1 * idx);
array[temp_0]  = - 1;
idx = (idx + 1);

// Block 2:
//   Predecessors: Block 1 Block 0 
//   Successors: Block 3 Block 1 
L3:;
if ((idx < bound)) goto L2;

// Block 3:
//   Predecessor: Block 2 
//   Successor: Exit 
L1:;

*** CFG for function: fib***

// Block 0:
//   Predecessor: Entry 
//   Successors: Block 1 Block 3 
val = val;
if ((val >= 2)) goto L6;

// Block 1:
//   Predecessor: Block 0 
//   Successor: Exit 
return 1;

// Block 2:
//   Predecessors: None
//   Successor: Block 8 
goto L5;

// Block 3:
//   Predecessor: Block 0 
//   Successors: Block 4 Block 7 
L6:;
temp_1 = (1 * val);
temp_2 = array[temp_1] ;
if ((temp_2 != - 1)) goto L8;

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
temp_3 = (val - 1);
redat1 = fib(temp_3);

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
temp_4 = (val - 2);
redat2 = fib(temp_4);

// Block 6:
//   Predecessor: Block 5 
//   Successor: Block 7 
temp_5 = (1 * val);
array[temp_5]  = (redat1 + redat2);

// Block 7:
//   Predecessors: Block 6 Block 3 
//   Successor: Exit 
L8:;
temp_6 = (1 * val);
temp_7 = array[temp_6] ;
return temp_7;

// Block 8:
//   Predecessor: Block 2 
//   Successor: Exit 
L5:;

*** CFG for function: main***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
bound = 32;
initialize_array();

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 2 
idx = 0;
printf("The first few digits of the Fibonacci sequence are:\n");

// Block 2:
//   Predecessor: Block 1 
//   Successor: Block 6 
goto L13;

// Block 3:
//   Predecessor: Block 6 
//   Successor: Block 4 
L12:;
redat1 = fib(idx);

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
printf("%d\n", redat1);

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
idx = (idx + 1);

// Block 6:
//   Predecessors: Block 5 Block 2 
//   Successors: Block 7 Block 3 
L13:;
if ((idx < bound)) goto L12;

// Block 7:
//   Predecessor: Block 6 
//   Successor: Exit 
return 0;

// Block 8:
//   Predecessors: None
//   Successor: Exit 
L10:;

