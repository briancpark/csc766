*** CFG for function: populate_arrays***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
array_1[0]  = 0;
array_2[0]  = 15;
array_3[0]  = 5;
array_4[0]  = 13;
array_1[1]  = 1;
array_2[1]  = 14;
array_3[1]  = 5;
array_4[1]  = 9;
array_1[2]  = 2;
array_2[2]  = 13;
array_3[2]  = 5;
array_4[2]  = 12;
array_1[3]  = 3;
array_2[3]  = 12;
array_3[3]  = 5;
array_4[3]  = 1;
array_1[4]  = 4;
array_2[4]  = 11;
array_3[4]  = 5;
array_4[4]  = 0;
array_1[5]  = 5;
array_2[5]  = 10;
array_3[5]  = 5;
array_4[5]  = 14;
array_1[6]  = 6;
array_2[6]  = 9;
array_3[6]  = 5;
array_4[6]  = 3;
array_1[7]  = 7;
array_2[7]  = 8;
array_3[7]  = 5;
array_4[7]  = 2;
array_1[8]  = 8;
array_2[8]  = 7;
array_3[8]  = 5;
array_4[8]  = 11;
array_1[9]  = 9;
array_2[9]  = 6;
array_3[9]  = 5;
array_4[9]  = 8;
array_1[10]  = 10;
array_2[10]  = 5;
array_3[10]  = 5;
array_4[10]  = 6;
array_1[11]  = 11;
array_2[11]  = 4;
array_3[11]  = 5;
array_4[11]  = 4;
array_1[12]  = 12;
array_2[12]  = 3;
array_3[12]  = 5;
array_4[12]  = 5;
array_1[13]  = 13;
array_2[13]  = 2;
array_3[13]  = 5;
array_4[13]  = 10;
array_1[14]  = 14;
array_2[14]  = 1;
array_3[14]  = 5;
array_4[14]  = 7;
array_1[15]  = 15;
array_2[15]  = 0;
array_3[15]  = 5;
array_4[15]  = 15;

// Block 1:
//   Predecessor: Block 0 
//   Successor: Exit 
L1:;

*** CFG for function: print_arrays***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
bound = 16;
printf("Array_1:\n");

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 4 
idx = 0;
goto L5;

// Block 2:
//   Predecessor: Block 4 
//   Successor: Block 3 
L4:;
temp_0 = (1 * idx);
temp_1 = array_1[temp_0] ;
printf("%d\n", temp_1);

// Block 3:
//   Predecessor: Block 2 
//   Successor: Block 4 
idx = (idx + 1);

// Block 4:
//   Predecessors: Block 3 Block 1 
//   Successors: Block 5 Block 2 
L5:;
if ((idx < bound)) goto L4;

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
printf("\nArray_2:\n");

// Block 6:
//   Predecessor: Block 5 
//   Successor: Block 9 
idx = 0;
goto L10;

// Block 7:
//   Predecessor: Block 9 
//   Successor: Block 8 
L9:;
temp_2 = (1 * idx);
temp_3 = array_2[temp_2] ;
printf("%d\n", temp_3);

// Block 8:
//   Predecessor: Block 7 
//   Successor: Block 9 
idx = (idx + 1);

// Block 9:
//   Predecessors: Block 8 Block 6 
//   Successors: Block 10 Block 7 
L10:;
if ((idx < bound)) goto L9;

// Block 10:
//   Predecessor: Block 9 
//   Successor: Block 11 
printf("\nArray_3:\n");

// Block 11:
//   Predecessor: Block 10 
//   Successor: Block 14 
idx = 0;
goto L14;

// Block 12:
//   Predecessor: Block 14 
//   Successor: Block 13 
L13:;
temp_4 = (1 * idx);
temp_5 = array_3[temp_4] ;
printf("%d\n", temp_5);

// Block 13:
//   Predecessor: Block 12 
//   Successor: Block 14 
idx = (idx + 1);

// Block 14:
//   Predecessors: Block 13 Block 11 
//   Successors: Block 15 Block 12 
L14:;
if ((idx < bound)) goto L13;

// Block 15:
//   Predecessor: Block 14 
//   Successor: Block 16 
printf("\nArray_4:\n");

// Block 16:
//   Predecessor: Block 15 
//   Successor: Block 19 
idx = 0;
goto L18;

// Block 17:
//   Predecessor: Block 19 
//   Successor: Block 18 
L17:;
temp_6 = (1 * idx);
temp_7 = array_4[temp_6] ;
printf("%d\n", temp_7);

// Block 18:
//   Predecessor: Block 17 
//   Successor: Block 19 
idx = (idx + 1);

// Block 19:
//   Predecessors: Block 18 Block 16 
//   Successors: Block 20 Block 17 
L18:;
if ((idx < bound)) goto L17;

// Block 20:
//   Predecessor: Block 19 
//   Successor: Block 21 
printf("\n");

// Block 21:
//   Predecessor: Block 20 
//   Successor: Exit 
L2:;

*** CFG for function: main***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
bound = 16;
populate_arrays();

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 2 
print_arrays();

// Block 2:
//   Predecessor: Block 1 
//   Successor: Block 6 
bound = 16;
idx = 0;
goto L23;

// Block 3:
//   Predecessor: Block 6 
//   Successors: Block 4 Block 5 
L22:;
temp_8 = (1 * idx);
temp_9 = array_1[temp_8] ;
temp_10 = (1 * idx);
temp_11 = (temp_10 + 1);
temp_12 = array_1[temp_11] ;
if ((temp_9 <= temp_12)) goto L25;

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 6 
temp_13 = (1 * idx);
temp = array_1[temp_13] ;
temp_14 = (1 * idx);
temp_15 = (1 * idx);
temp_16 = (temp_15 + 1);
array_1[temp_14]  = array_1[temp_16] ;
temp_17 = (1 * idx);
temp_18 = (temp_17 + 1);
array_1[temp_18]  = temp;
idx = 0;
goto L23;

// Block 5:
//   Predecessor: Block 3 
//   Successor: Block 6 
L25:;
idx = (idx + 1);

// Block 6:
//   Predecessors: Block 5 Block 2 Block 4 
//   Successors: Block 7 Block 3 
L23:;
temp_19 = (bound - 1);
if ((idx < temp_19)) goto L22;

// Block 7:
//   Predecessor: Block 6 
//   Successor: Block 11 
idx = 0;
goto L28;

// Block 8:
//   Predecessor: Block 11 
//   Successors: Block 9 Block 10 
L27:;
temp_20 = (1 * idx);
temp_21 = array_2[temp_20] ;
temp_22 = (1 * idx);
temp_23 = (temp_22 + 1);
temp_24 = array_2[temp_23] ;
if ((temp_21 <= temp_24)) goto L30;

// Block 9:
//   Predecessor: Block 8 
//   Successor: Block 11 
temp_25 = (1 * idx);
temp = array_2[temp_25] ;
temp_26 = (1 * idx);
temp_27 = (1 * idx);
temp_28 = (temp_27 + 1);
array_2[temp_26]  = array_2[temp_28] ;
temp_29 = (1 * idx);
temp_30 = (temp_29 + 1);
array_2[temp_30]  = temp;
idx = 0;
goto L28;

// Block 10:
//   Predecessor: Block 8 
//   Successor: Block 11 
L30:;
idx = (idx + 1);

// Block 11:
//   Predecessors: Block 10 Block 7 Block 9 
//   Successors: Block 12 Block 8 
L28:;
temp_31 = (bound - 1);
if ((idx < temp_31)) goto L27;

// Block 12:
//   Predecessor: Block 11 
//   Successor: Block 16 
idx = 0;
goto L33;

// Block 13:
//   Predecessor: Block 16 
//   Successors: Block 14 Block 15 
L32:;
temp_32 = (1 * idx);
temp_33 = array_3[temp_32] ;
temp_34 = (1 * idx);
temp_35 = (temp_34 + 1);
temp_36 = array_3[temp_35] ;
if ((temp_33 <= temp_36)) goto L35;

// Block 14:
//   Predecessor: Block 13 
//   Successor: Block 16 
temp_37 = (1 * idx);
temp = array_1[temp_37] ;
temp_38 = (1 * idx);
temp_39 = (1 * idx);
temp_40 = (temp_39 + 1);
array_3[temp_38]  = array_3[temp_40] ;
temp_41 = (1 * idx);
temp_42 = (temp_41 + 1);
array_3[temp_42]  = temp;
idx = 0;
goto L33;

// Block 15:
//   Predecessor: Block 13 
//   Successor: Block 16 
L35:;
idx = (idx + 1);

// Block 16:
//   Predecessors: Block 15 Block 12 Block 14 
//   Successors: Block 17 Block 13 
L33:;
temp_43 = (bound - 1);
if ((idx < temp_43)) goto L32;

// Block 17:
//   Predecessor: Block 16 
//   Successor: Block 21 
idx = 0;
goto L38;

// Block 18:
//   Predecessor: Block 21 
//   Successors: Block 19 Block 20 
L37:;
temp_44 = (1 * idx);
temp_45 = array_4[temp_44] ;
temp_46 = (1 * idx);
temp_47 = (temp_46 + 1);
temp_48 = array_4[temp_47] ;
if ((temp_45 <= temp_48)) goto L40;

// Block 19:
//   Predecessor: Block 18 
//   Successor: Block 21 
temp_49 = (1 * idx);
temp = array_4[temp_49] ;
temp_50 = (1 * idx);
temp_51 = (1 * idx);
temp_52 = (temp_51 + 1);
array_4[temp_50]  = array_4[temp_52] ;
temp_53 = (1 * idx);
temp_54 = (temp_53 + 1);
array_4[temp_54]  = temp;
idx = 0;
goto L38;

// Block 20:
//   Predecessor: Block 18 
//   Successor: Block 21 
L40:;
idx = (idx + 1);

// Block 21:
//   Predecessors: Block 20 Block 17 Block 19 
//   Successors: Block 22 Block 18 
L38:;
temp_55 = (bound - 1);
if ((idx < temp_55)) goto L37;

// Block 22:
//   Predecessor: Block 21 
//   Successor: Block 23 
print_arrays();

// Block 23:
//   Predecessor: Block 22 
//   Successor: Exit 
return 0;

// Block 24:
//   Predecessors: None
//   Successor: Exit 
L21:;

