*** CFG for function: square***

// Block 0:
//   Predecessor: Entry 
//   Successor: Exit 
temp_0 = (x * x);
temp_1 = (temp_0 + 500);
temp_2 = (temp_1 / 1000);
return temp_2;

// Block 1:
//   Predecessors: None
//   Successor: Exit 
L1:;

*** CFG for function: complex_abs_squared***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
redat1 = square(real);

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 2 
redat2 = square(imag);

// Block 2:
//   Predecessor: Block 1 
//   Successor: Exit 
temp_3 = (redat1 + redat2);
return temp_3;

// Block 3:
//   Predecessors: None
//   Successor: Exit 
L2:;

*** CFG for function: check_for_bail***

// Block 0:
//   Predecessor: Entry 
//   Successors: Block 1 Block 2 
if ((real > 4000)) goto L6;

// Block 1:
//   Predecessor: Block 0 
//   Successors: Block 2 Block 4 
if ((imag <= 4000)) goto L4;

// Block 2:
//   Predecessors: Block 1 Block 0 
//   Successor: Exit 
L6:;
return 0;

// Block 3:
//   Predecessors: None
//   Successor: Block 9 
goto L3;

// Block 4:
//   Predecessor: Block 1 
//   Successor: Block 5 
L4:;
redat1 = complex_abs_squared(real, imag);

// Block 5:
//   Predecessor: Block 4 
//   Successors: Block 6 Block 8 
if ((1600 <= redat1)) goto L7;

// Block 6:
//   Predecessor: Block 5 
//   Successor: Exit 
return 0;

// Block 7:
//   Predecessors: None
//   Successor: Block 9 
goto L3;

// Block 8:
//   Predecessor: Block 5 
//   Successor: Exit 
L7:;
return 1;

// Block 9:
//   Predecessors: Block 3 Block 7 
//   Successor: Exit 
L3:;

*** CFG for function: absval***

// Block 0:
//   Predecessor: Entry 
//   Successors: Block 1 Block 3 
if ((x >= 0)) goto L10;

// Block 1:
//   Predecessor: Block 0 
//   Successor: Exit 
temp_4 = (x * - 1);
return temp_4;

// Block 2:
//   Predecessors: None
//   Successor: Block 4 
goto L9;

// Block 3:
//   Predecessor: Block 0 
//   Successor: Exit 
L10:;
return x;

// Block 4:
//   Predecessor: Block 2 
//   Successor: Exit 
L9:;

*** CFG for function: checkpixel***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 9 
x = x;
y = y;
real = 0;
imag = 0;
iter = 0;
bail = 16000;
goto L14;

// Block 1:
//   Predecessor: Block 9 
//   Successor: Block 2 
L13:;
redat1 = square(real);

// Block 2:
//   Predecessor: Block 1 
//   Successor: Block 3 
redat2 = square(imag);

// Block 3:
//   Predecessor: Block 2 
//   Successor: Block 4 
temp_5 = (redat1 - redat2);
temp = (temp_5 + x);
temp_6 = (2 * real);
temp_7 = (temp_6 * imag);
temp_8 = (temp_7 + 500);
temp_9 = (temp_8 / 1000);
imag = (temp_9 + y);
real = temp;
redat3 = absval(real);

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
redat4 = absval(imag);

// Block 5:
//   Predecessor: Block 4 
//   Successors: Block 6 Block 8 
temp_10 = (redat3 + redat4);
if ((temp_10 <= 5000)) goto L16;

// Block 6:
//   Predecessor: Block 5 
//   Successor: Exit 
return 0;

// Block 7:
//   Predecessors: None
//   Successor: Block 11 
goto L12;

// Block 8:
//   Predecessor: Block 5 
//   Successor: Block 9 
L16:;
iter = (iter + 1);

// Block 9:
//   Predecessors: Block 8 Block 0 
//   Successors: Block 10 Block 1 
L14:;
if ((iter < 255)) goto L13;

// Block 10:
//   Predecessor: Block 9 
//   Successor: Exit 
return 1;

// Block 11:
//   Predecessor: Block 7 
//   Successor: Exit 
L12:;

*** CFG for function: main***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 11 
y = 950;
goto L20;

// Block 1:
//   Predecessor: Block 11 
//   Successor: Block 8 
L19:;
x = - 2100;
goto L23;

// Block 2:
//   Predecessor: Block 8 
//   Successor: Block 3 
L22:;
redat1 = checkpixel(x, y);

// Block 3:
//   Predecessor: Block 2 
//   Successors: Block 4 Block 5 
on = redat1;
if ((on != 1)) goto L25;

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
printf("X");

// Block 5:
//   Predecessors: Block 4 Block 3 
//   Successors: Block 6 Block 7 
L25:;
if ((on != 0)) goto L28;

// Block 6:
//   Predecessor: Block 5 
//   Successor: Block 7 
printf(" ");

// Block 7:
//   Predecessors: Block 6 Block 5 
//   Successor: Block 8 
L28:;
x = (x + 40);

// Block 8:
//   Predecessors: Block 7 Block 1 
//   Successors: Block 9 Block 2 
L23:;
if ((x < 1000)) goto L22;

// Block 9:
//   Predecessor: Block 8 
//   Successor: Block 10 
printf("\n");

// Block 10:
//   Predecessor: Block 9 
//   Successor: Block 11 
y = (y - 50);

// Block 11:
//   Predecessors: Block 10 Block 0 
//   Successors: Block 12 Block 1 
L20:;
if ((y > - 950)) goto L19;

// Block 12:
//   Predecessor: Block 11 
//   Successor: Exit 
return 0;

// Block 13:
//   Predecessors: None
//   Successor: Exit 
L18:;

