*** CFG for function: getinput***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 7 
a = - 1;
goto L3;

// Block 1:
//   Predecessor: Block 7 
//   Successor: Block 2 
L2:;
scanf("%d", (&a));

// Block 2:
//   Predecessor: Block 1 
//   Successors: Block 3 Block 4 
if ((0 > a)) goto L8;

// Block 3:
//   Predecessor: Block 2 
//   Successors: Block 4 Block 6 
if ((a <= 100)) goto L6;

// Block 4:
//   Predecessors: Block 3 Block 2 
//   Successor: Block 5 
L8:;
printf("I need a non-negative number less than 100: ");

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
a = - 1;

// Block 6:
//   Predecessors: Block 5 Block 3 
//   Successor: Block 7 
L6:;

// Block 7:
//   Predecessors: Block 6 Block 0 
//   Successors: Block 8 Block 1 
L3:;
if ((0 > a)) goto L2;

// Block 8:
//   Predecessor: Block 7 
//   Successor: Exit 
return a;

// Block 9:
//   Predecessors: None
//   Successor: Exit 
L1:;

*** CFG for function: main***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
printf("Please give the size of the vectors to be multiplied: ");

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 2 
redat1 = getinput();

// Block 2:
//   Predecessor: Block 1 
//   Successor: Block 5 
size = redat1;
A[0]  = 0;
i = 1;
goto L15;

// Block 3:
//   Predecessor: Block 5 
//   Successor: Block 4 
L12:;
temp_0 = (1 * i);
temp_1 = (temp_0 - 1);
temp_2 = A[temp_1] ;
temp_3 = (i * i);
temp_4 = (1 * i);
A[temp_4]  = (temp_2 + temp_3);

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
L13:;
i = (i + 1);

// Block 5:
//   Predecessors: Block 4 Block 2 
//   Successors: Block 6 Block 3 
L15:;
if ((i < size)) goto L12;

// Block 6:
//   Predecessor: Block 5 
//   Successor: Block 9 
B[0]  = 0;
i = 1;
goto L19;

// Block 7:
//   Predecessor: Block 9 
//   Successor: Block 8 
L16:;
temp_5 = (1 * i);
temp_6 = (temp_5 - 1);
temp_7 = B[temp_6] ;
temp_8 = (1 * i);
B[temp_8]  = (i + temp_7);

// Block 8:
//   Predecessor: Block 7 
//   Successor: Block 9 
L17:;
i = (i + 1);

// Block 9:
//   Predecessors: Block 8 Block 6 
//   Successors: Block 10 Block 7 
L19:;
if ((i < size)) goto L16;

// Block 10:
//   Predecessor: Block 9 
//   Successor: Block 13 
result = 0;
i = 0;
goto L23;

// Block 11:
//   Predecessor: Block 13 
//   Successor: Block 12 
L20:;
temp_9 = (1 * i);
temp_10 = A[temp_9] ;
temp_11 = (1 * i);
temp_12 = B[temp_11] ;
temp_13 = (temp_10 * temp_12);
result = (result + temp_13);

// Block 12:
//   Predecessor: Block 11 
//   Successor: Block 13 
L21:;
i = (i + 1);

// Block 13:
//   Predecessors: Block 12 Block 10 
//   Successors: Block 14 Block 11 
L23:;
if ((i < size)) goto L20;

// Block 14:
//   Predecessor: Block 13 
//   Successor: Block 15 
printf("0\n");

// Block 15:
//   Predecessor: Block 14 
//   Successor: Exit 
return 0;

// Block 16:
//   Predecessors: None
//   Successor: Exit 
L10:;

