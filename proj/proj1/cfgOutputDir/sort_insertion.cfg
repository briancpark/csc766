*** CFG for function: insertSort***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 8 
lb = lb;
ub = ub;
i = (lb + 1);
goto L5;

// Block 1:
//   Predecessor: Block 8 
//   Successor: Block 4 
L2:;
temp_0 = (1 * i);
t = data[temp_0] ;
j = (i - 1);
goto L9;

// Block 2:
//   Predecessor: Block 5 
//   Successor: Block 3 
L6:;
temp_1 = (1 * j);
temp_2 = (temp_1 + 1);
temp_3 = (1 * j);
data[temp_2]  = data[temp_3] ;

// Block 3:
//   Predecessor: Block 2 
//   Successor: Block 4 
L7:;
j = (j - 1);

// Block 4:
//   Predecessors: Block 3 Block 1 
//   Successors: Block 5 Block 6 
L9:;
if ((j < lb)) goto L10;

// Block 5:
//   Predecessor: Block 4 
//   Successors: Block 6 Block 2 
temp_4 = (1 * j);
temp_5 = data[temp_4] ;
if ((temp_5 > t)) goto L6;

// Block 6:
//   Predecessors: Block 5 Block 4 
//   Successor: Block 7 
L10:;
temp_6 = (1 * j);
temp_7 = (temp_6 + 1);
data[temp_7]  = t;

// Block 7:
//   Predecessor: Block 6 
//   Successor: Block 8 
L3:;
i = (i + 1);

// Block 8:
//   Predecessors: Block 7 Block 0 
//   Successors: Block 9 Block 1 
L5:;
if ((i <= ub)) goto L2;

// Block 9:
//   Predecessor: Block 8 
//   Successor: Exit 
L1:;

*** CFG for function: fill***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
ub = ub;
srand(1);

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 5 
i = lb;
goto L15;

// Block 2:
//   Predecessor: Block 5 
//   Successor: Block 3 
L12:;
redat1 = rand();

// Block 3:
//   Predecessor: Block 2 
//   Successor: Block 4 
temp_8 = (1 * i);
data[temp_8]  = (redat1 % 1000);

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
L13:;
i = (i + 1);

// Block 5:
//   Predecessors: Block 4 Block 1 
//   Successors: Block 6 Block 2 
L15:;
if ((i <= ub)) goto L12;

// Block 6:
//   Predecessor: Block 5 
//   Successor: Exit 
L11:;

*** CFG for function: main***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
maxnum = 30;
lb = 0;
ub = (maxnum - 1);
fill(lb, ub);

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 2 
insertSort(lb, ub);

// Block 2:
//   Predecessor: Block 1 
//   Successor: Block 3 
printf("results:\n");

// Block 3:
//   Predecessor: Block 2 
//   Successor: Block 6 
i = lb;
goto L21;

// Block 4:
//   Predecessor: Block 6 
//   Successor: Block 5 
L18:;
temp_9 = (1 * i);
temp_10 = data[temp_9] ;
printf("%d: %d\n", i, temp_10);

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
L19:;
i = (i + 1);

// Block 6:
//   Predecessors: Block 5 Block 3 
//   Successors: Block 7 Block 4 
L21:;
if ((i <= ub)) goto L18;

// Block 7:
//   Predecessor: Block 6 
//   Successor: Exit 
return 0;

// Block 8:
//   Predecessors: None
//   Successor: Exit 
L16:;

