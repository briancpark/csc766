*** CFG for function: recursedigit***

// Block 0:
//   Predecessor: Entry 
//   Successors: Block 1 Block 2 
n = n;
if ((n != 0)) goto L2;

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 10 
goto L1;

// Block 2:
//   Predecessor: Block 0 
//   Successors: Block 3 Block 4 
L2:;
on = 0;
temp_0 = (n / 2);
temp_1 = (2 * temp_0);
temp_2 = (n - temp_1);
if ((temp_2 == 0)) goto L4;

// Block 3:
//   Predecessor: Block 2 
//   Successor: Block 4 
on = 1;

// Block 4:
//   Predecessors: Block 3 Block 2 
//   Successor: Block 5 
L4:;
temp_3 = (n / 2);
recursedigit(temp_3);

// Block 5:
//   Predecessor: Block 4 
//   Successors: Block 6 Block 7 
if ((on != 0)) goto L6;

// Block 6:
//   Predecessor: Block 5 
//   Successor: Block 7 
printf("0");

// Block 7:
//   Predecessors: Block 6 Block 5 
//   Successors: Block 8 Block 9 
L6:;
if ((on != 1)) goto L9;

// Block 8:
//   Predecessor: Block 7 
//   Successor: Block 9 
printf("1");

// Block 9:
//   Predecessors: Block 8 Block 7 
//   Successor: Block 10 
L9:;

// Block 10:
//   Predecessors: Block 9 Block 1 
//   Successor: Exit 
L1:;

*** CFG for function: main***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 6 
a = 0;
goto L14;

// Block 1:
//   Predecessor: Block 6 
//   Successor: Block 2 
L13:;
printf("Give me a number: ");

// Block 2:
//   Predecessor: Block 1 
//   Successor: Block 3 
scanf("%d", (&a));

// Block 3:
//   Predecessor: Block 2 
//   Successors: Block 4 Block 5 
if ((0 < a)) goto L18;

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
printf("I need a positive integer.\n");

// Block 5:
//   Predecessors: Block 4 Block 3 
//   Successor: Block 6 
L18:;

// Block 6:
//   Predecessors: Block 5 Block 0 
//   Successors: Block 7 Block 1 
L14:;
if ((0 >= a)) goto L13;

// Block 7:
//   Predecessor: Block 6 
//   Successor: Block 8 
printf("The binary representation of: ");

// Block 8:
//   Predecessor: Block 7 
//   Successor: Block 9 
printf("%d\n", a);

// Block 9:
//   Predecessor: Block 8 
//   Successor: Block 10 
printf("is: ");

// Block 10:
//   Predecessor: Block 9 
//   Successor: Block 11 
recursedigit(a);

// Block 11:
//   Predecessor: Block 10 
//   Successor: Block 12 
printf("\n\n");

// Block 12:
//   Predecessor: Block 11 
//   Successor: Exit 
return 0;

// Block 13:
//   Predecessors: None
//   Successor: Exit 
L12:;

