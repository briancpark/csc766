*** CFG for function: init_nbr***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
nbr_5[0]  = - 3;
nbr_5[1]  = 12;
nbr_5[2]  = 17;
nbr_5[3]  = 12;
nbr_5[4]  = - 3;

// Block 1:
//   Predecessor: Block 0 
//   Successor: Exit 
L1:;

*** CFG for function: getinput***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 7 
a = - 1;
goto L4;

// Block 1:
//   Predecessor: Block 7 
//   Successor: Block 2 
L3:;
scanf("%d", (&a));

// Block 2:
//   Predecessor: Block 1 
//   Successors: Block 3 Block 4 
if ((0 > a)) goto L9;

// Block 3:
//   Predecessor: Block 2 
//   Successors: Block 4 Block 6 
if ((a <= 100)) goto L7;

// Block 4:
//   Predecessors: Block 3 Block 2 
//   Successor: Block 5 
L9:;
printf("I need a non-negative number less than 100: ");

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
a = - 1;

// Block 6:
//   Predecessors: Block 5 Block 3 
//   Successor: Block 7 
L7:;

// Block 7:
//   Predecessors: Block 6 Block 0 
//   Successors: Block 8 Block 1 
L4:;
if ((0 > a)) goto L3;

// Block 8:
//   Predecessor: Block 7 
//   Successor: Exit 
return a;

// Block 9:
//   Predecessors: None
//   Successor: Exit 
L2:;

*** CFG for function: moving***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 6 
size = size;
i = 2;
goto L15;

// Block 1:
//   Predecessor: Block 6 
//   Successor: Block 2 
L12:;
temp = 0;
j = - 2;

// Block 2:
//   Predecessors: Block 1 Block 3 
//   Successor: Block 3 
L16:;
temp_0 = (i + j);
temp_1 = (1 * temp_0);
temp_2 = V[temp_1] ;
temp_3 = (1 * j);
temp_4 = (temp_3 + 2);
temp_5 = nbr_5[temp_4] ;
temp_6 = (temp_2 * temp_5);
temp = (temp + temp_6);

// Block 3:
//   Predecessor: Block 2 
//   Successors: Block 4 Block 2 
L17:;
j = (j + 1);
if ((j < 3)) goto L16;

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
temp_7 = (1 * i);
V[temp_7]  = (temp / magic);

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
L13:;
i = (i + 1);

// Block 6:
//   Predecessors: Block 5 Block 0 
//   Successors: Block 7 Block 1 
L15:;
temp_8 = (size - 2);
if ((i < temp_8)) goto L12;

// Block 7:
//   Predecessor: Block 6 
//   Successor: Exit 
L11:;

*** CFG for function: main***

// Block 0:
//   Predecessor: Entry 
//   Successor: Block 1 
printf("Please input the size of the vector to be transformed: ");

// Block 1:
//   Predecessor: Block 0 
//   Successor: Block 2 
redat1 = getinput();

// Block 2:
//   Predecessor: Block 1 
//   Successor: Block 6 
size = redat1;
i = 0;
goto L25;

// Block 3:
//   Predecessor: Block 6 
//   Successor: Block 4 
L22:;
redat2 = rand();

// Block 4:
//   Predecessor: Block 3 
//   Successor: Block 5 
temp_9 = (1 * i);
V[temp_9]  = (redat2 % 100);

// Block 5:
//   Predecessor: Block 4 
//   Successor: Block 6 
L23:;
i = (i + 1);

// Block 6:
//   Predecessors: Block 5 Block 2 
//   Successors: Block 7 Block 3 
L25:;
if ((i < size)) goto L22;

// Block 7:
//   Predecessor: Block 6 
//   Successor: Block 8 
printf("Original vector:\n");

// Block 8:
//   Predecessor: Block 7 
//   Successor: Block 11 
i = 0;
goto L30;

// Block 9:
//   Predecessor: Block 11 
//   Successor: Block 10 
L27:;
temp_10 = (1 * i);
temp_11 = V[temp_10] ;
printf("%d\n", temp_11);

// Block 10:
//   Predecessor: Block 9 
//   Successor: Block 11 
L28:;
i = (i + 1);

// Block 11:
//   Predecessors: Block 10 Block 8 
//   Successors: Block 12 Block 9 
L30:;
if ((i < size)) goto L27;

// Block 12:
//   Predecessor: Block 11 
//   Successor: Block 13 
printf("\n");

// Block 13:
//   Predecessor: Block 12 
//   Successor: Block 14 
init_nbr();

// Block 14:
//   Predecessor: Block 13 
//   Successor: Block 15 
moving(size);

// Block 15:
//   Predecessor: Block 14 
//   Successor: Block 16 
printf("Moving edge vector:\n");

// Block 16:
//   Predecessor: Block 15 
//   Successor: Block 19 
i = 0;
goto L37;

// Block 17:
//   Predecessor: Block 19 
//   Successor: Block 18 
L34:;
temp_12 = (1 * i);
temp_13 = V[temp_12] ;
printf("%d\n", temp_13);

// Block 18:
//   Predecessor: Block 17 
//   Successor: Block 19 
L35:;
i = (i + 1);

// Block 19:
//   Predecessors: Block 18 Block 16 
//   Successors: Block 20 Block 17 
L37:;
if ((i < size)) goto L34;

// Block 20:
//   Predecessor: Block 19 
//   Successor: Block 21 
printf("\n");

// Block 21:
//   Predecessor: Block 20 
//   Successor: Exit 
return 0;

// Block 22:
//   Predecessors: None
//   Successor: Exit 
L20:;

