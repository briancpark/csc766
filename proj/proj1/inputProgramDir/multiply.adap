(FileAst "multiply.adap" Begin)
(ImportFile "multiply.adap.h")
(VarAst getinput (DataType function (FuncType function (DataType int 0 )) 0 ))
(Comment location "global var getinput in multiply.c at line 1")
(FuncAst getinput AUTO (FuncType getinput (DataType int 0 )) Begin )
(CodeBlock fbody Begin)(CodeBlock level1 Begin)
(VarAst a (DataType int 0 ))
(AssignStat = (VarAccAst a)(ConstAst -1 ))
(GotoStat L3)
(LabelStat L2)
(CodeBlock level2 Begin)
(ExprStat FuncCall (VarAccAst scanf)(ConstAst "%d")(UopAcc & (VarAccAst a)))
(GotoStat L8 (ExprAst > (ConstAst 0 )(VarAccAst a)))
(GotoStat L6 (ExprAst <= (VarAccAst a)(ConstAst 100 )))
(LabelStat L8)
(CodeBlock level3 Begin)
(ExprStat FuncCall (VarAccAst printf)(ConstAst "I need a non-negative number less than 100: "))
(AssignStat = (VarAccAst a)(ConstAst -1 ))
(CodeBlock level3 End)
(LabelStat L6)
(CodeBlock level2 End)
(LabelStat L3)
(GotoStat L2 (ExprAst > (ConstAst 0 )(VarAccAst a)))
(ReturnStat return (VarAccAst a))
(CodeBlock level1 End)
(LabelStat L1)
(CodeBlock fbody End)
(FuncAst getinput End)
(VarAst main (DataType function (FuncType function (DataType int 0 )) 0 ))
(Comment location "global var main in multiply.c at line 18")
(FuncAst main AUTO (FuncType main (DataType int 0 )) Begin )
(CodeBlock fbody Begin)(CodeBlock level1 Begin)
(VarAst i (DataType int 0 ))
(VarAst A (DataType array (ArrayType array (DataType int 0 ) 100 ) 0 ))
(VarAst B (DataType array (ArrayType array (DataType int 0 ) 100 ) 0 ))
(VarAst size (DataType int 0 ))
(VarAst result (DataType int 0 ))
(VarAst redat1 (DataType int 0 ))
(ExprStat FuncCall (VarAccAst printf)(ConstAst "Please give the size of the vectors to be multiplied: "))
(AssignStat = (VarAccAst redat1)(ExprAst FuncCall (VarAccAst getinput)))
(AssignStat = (VarAccAst size)(VarAccAst redat1))
(AssignStat = (ArrayAcc . (VarAccAst A)(ConstAst 0 ))(ConstAst 0 ))
(AssignStat = (VarAccAst i)(ConstAst 1 ))
(GotoStat L15)
(LabelStat L12)
(AssignStat = (ArrayAcc . (VarAccAst A)(ExprAst * (ConstAst 1 )(VarAccAst i)))(ExprAst + (ArrayAcc . (VarAccAst A)(ExprAst - (ExprAst * (ConstAst 1 )(VarAccAst i))(ConstAst 1 )))(ExprAst * (VarAccAst i)(VarAccAst i))))
(LabelStat L13)
(AssignStat = (VarAccAst i)(ExprAst + (VarAccAst i)(ConstAst 1 )))
(LabelStat L15)
(GotoStat L12 (ExprAst < (VarAccAst i)(VarAccAst size)))
(AssignStat = (ArrayAcc . (VarAccAst B)(ConstAst 0 ))(ConstAst 0 ))
(AssignStat = (VarAccAst i)(ConstAst 1 ))
(GotoStat L19)
(LabelStat L16)
(AssignStat = (ArrayAcc . (VarAccAst B)(ExprAst * (ConstAst 1 )(VarAccAst i)))(ExprAst + (VarAccAst i)(ArrayAcc . (VarAccAst B)(ExprAst - (ExprAst * (ConstAst 1 )(VarAccAst i))(ConstAst 1 )))))
(LabelStat L17)
(AssignStat = (VarAccAst i)(ExprAst + (VarAccAst i)(ConstAst 1 )))
(LabelStat L19)
(GotoStat L16 (ExprAst < (VarAccAst i)(VarAccAst size)))
(AssignStat = (VarAccAst result)(ConstAst 0 ))
(AssignStat = (VarAccAst i)(ConstAst 0 ))
(GotoStat L23)
(LabelStat L20)
(AssignStat = (VarAccAst result)(ExprAst + (VarAccAst result)(ExprAst * (ArrayAcc . (VarAccAst A)(ExprAst * (ConstAst 1 )(VarAccAst i)))(ArrayAcc . (VarAccAst B)(ExprAst * (ConstAst 1 )(VarAccAst i))))))
(LabelStat L21)
(AssignStat = (VarAccAst i)(ExprAst + (VarAccAst i)(ConstAst 1 )))
(LabelStat L23)
(GotoStat L20 (ExprAst < (VarAccAst i)(VarAccAst size)))
(ExprStat FuncCall (VarAccAst printf)(ConstAst "0\n"))
(CodeBlock level1 End)
(ReturnStat return (ConstAst 0 ))
(LabelStat L10)
(CodeBlock fbody End)
(FuncAst main End)
(FileAst "multiply.adap" End)

